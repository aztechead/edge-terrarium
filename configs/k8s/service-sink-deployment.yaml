# =============================================================================
# KUBERNETES DEPLOYMENT - SERVICE SINK
# =============================================================================
# This deployment manages the Service Sink application, which handles all
# HTTP requests that don't match the CDP client routing patterns.
#
# The Service Sink is a simple C application that processes requests and
# returns JSON responses with path analysis information.
#
# Key Concepts:
# - Deployment: Manages Pod replicas and rolling updates
# - Pod: The smallest deployable unit in Kubernetes (one or more containers)
# - ReplicaSet: Ensures a specified number of Pod replicas are running
# - Service: Provides network access to Pods
#
# Documentation: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# =============================================================================

apiVersion: apps/v1                # Apps API version for Deployment resources
kind: Deployment                   # Resource type - creates a deployment
metadata:                          # Metadata about this deployment
  name: service-sink               # Name of the deployment
  namespace: terrarium             # Namespace where this resource lives
  labels:                          # Labels for organizing resources
    app: service-sink              # Identifies this as the service-sink app
    component: backend             # Identifies this as a backend component

spec:                              # Specification of the deployment
  replicas: 2                      # Number of Pod replicas to maintain (for high availability)
  
  # Selector tells the deployment which Pods it manages
  selector:
    matchLabels:                   # Pods with these labels are managed by this deployment
      app: service-sink            # Must match the labels in the Pod template below

  # Template defines how new Pods should be created
  template:
    metadata:                      # Metadata for Pods created from this template
      labels:                      # Labels applied to each Pod
        app: service-sink          # Must match the selector above
        component: backend         # Identifies this as a backend component

    spec:                          # Specification for Pods created from this template
      containers:                  # List of containers in each Pod
      - name: service-sink         # Name of the container
        image: terrarium-service-sink:latest  # Docker image to use
        imagePullPolicy: Never     # Never pull from registry (use local image for development)
        
        # Ports exposed by the container
        ports:
        - containerPort: 8080      # Port the container listens on
          name: http               # Name for referencing this port
          protocol: TCP            # Protocol (TCP or UDP)
        
        # Environment variables passed to the container
        env:
        - name: SERVICE_NAME       # Environment variable name
          value: "service-sink"    # Environment variable value
        - name: LOG_LEVEL          # Logging level
          value: "info"            # Set to info level
        
        # Resource requirements and limits
        resources:
          requests:                # Minimum resources required
            memory: "64Mi"         # 64 megabytes of memory
            cpu: "50m"             # 50 millicores of CPU (0.05 cores)
          limits:                  # Maximum resources allowed
            memory: "128Mi"        # 128 megabytes of memory
            cpu: "100m"            # 100 millicores of CPU (0.1 cores)
        
        # Liveness probe - checks if container is alive
        livenessProbe:
          tcpSocket:               # Check if TCP socket is open
            port: 8080             # Port to check
          initialDelaySeconds: 30  # Wait 30 seconds before first check
          periodSeconds: 10        # Check every 10 seconds
          timeoutSeconds: 5        # Wait 5 seconds for response
          failureThreshold: 3      # Mark unhealthy after 3 failures
        
        # Readiness probe - checks if container is ready to serve traffic
        readinessProbe:
          tcpSocket:               # Check if TCP socket is open
            port: 8080             # Port to check
          initialDelaySeconds: 5   # Wait 5 seconds before first check
          periodSeconds: 5         # Check every 5 seconds
          timeoutSeconds: 3        # Wait 3 seconds for response
          failureThreshold: 3      # Mark not ready after 3 failures

      # Restart policy for containers in the Pod
      restartPolicy: Always        # Always restart containers if they fail
