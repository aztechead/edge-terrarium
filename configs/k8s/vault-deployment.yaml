# =============================================================================
# VAULT DEPLOYMENT CONFIGURATION
# =============================================================================
# This file defines the HashiCorp Vault deployment for the Terrarium cluster.
# Vault is a secrets management tool that securely stores and manages sensitive
# data like TLS certificates, API keys, and other secrets.
#
# Key Concepts:
# - Deployment: Manages a set of identical pods (replicas)
# - ConfigMap: Stores configuration data that pods can access
# - Volume: Persistent storage for Vault data
# - Environment Variables: Configuration passed to the container
# - Security Context: Defines security settings for the pod
# - Resource Limits: CPU and memory constraints for the container
#
# Documentation: https://www.vaultproject.io/docs/platform/k8s
# =============================================================================

apiVersion: apps/v1                    # API version for Deployment resources
kind: Deployment                       # Resource type - creates a deployment
metadata:                              # Metadata about this deployment
  name: vault                          # Name of the deployment
  namespace: terrarium                 # Namespace where this deployment lives
  labels:                              # Labels for organization and selection
    app: vault                         # Identifies this as a Vault application
    project: terrarium                 # Identifies this as part of the terrarium project
    environment: development           # Identifies this as a development environment
spec:                                  # Specification for the deployment
  replicas: 1                          # Number of pod replicas to maintain
  selector:                            # How to select pods managed by this deployment
    matchLabels:
      app: vault                       # Select pods with this label
  template:                            # Template for creating new pods
    metadata:                          # Metadata for pods created from this template
      labels:                          # Labels applied to pods
        app: vault                     # Identifies this as a Vault pod
        project: terrarium             # Identifies this as part of the terrarium project
        environment: development       # Identifies this as a development environment
    spec:                              # Specification for the pod
      # Security context for the pod
      # This ensures Vault runs with appropriate permissions
      securityContext:
        runAsUser: 100                 # Run as user ID 100 (vault user in container)
        runAsGroup: 1000               # Run as group ID 1000
        fsGroup: 1000                  # File system group ID
      
      # Init containers run before the main container starts
      # This container sets up the Vault configuration
      initContainers:
      - name: vault-config              # Name of the init container
        image: hashicorp/vault:latest   # Official Vault image
        command: ['sh', '-c']          # Command to run
        args:                          # Arguments for the command
          - |
            # Create the vault configuration directory
            mkdir -p /vault/config
            # Copy the configuration from the configmap
            cp /tmp/config/vault.hcl /vault/config/
            # Set proper permissions
            chown -R vault:vault /vault/config
            echo "Vault configuration initialized"
        volumeMounts:                  # Mount volumes in the init container
        - name: vault-config           # Mount the configmap as a volume
          mountPath: /tmp/config       # Where to mount the configmap
        - name: vault-data             # Mount the data volume
          mountPath: /vault/data       # Where to mount the data volume
      
      containers:                      # Main containers in the pod
      - name: vault                     # Name of the main container
        image: hashicorp/vault:latest   # Official Vault image
        imagePullPolicy: IfNotPresent  # Only pull if not present locally
        
        # Port configuration
        ports:
        - containerPort: 8200          # Vault API port
          name: http                   # Name of the port
          protocol: TCP                # Protocol type
        
        # Environment variables for Vault configuration
        env:
        - name: VAULT_DEV_ROOT_TOKEN_ID  # Development root token (for dev mode)
          value: "root"                # Simple root token for development
        - name: VAULT_DEV_LISTEN_ADDRESS # Address for Vault to listen on
          value: "0.0.0.0:8200"       # Listen on all interfaces
        - name: VAULT_ADDR             # Vault API address
          value: "http://0.0.0.0:8200" # Local address for Vault API
        - name: VAULT_API_ADDR         # Vault API address for clients
          value: "http://vault.terrarium.svc.cluster.local:8200" # Cluster service address
        
        # Command to start Vault
        command: ["vault"]             # Vault binary
        args:                          # Arguments for Vault
          - "server"                   # Run Vault in server mode
          - "-config=/vault/config"    # Use configuration from mounted volume
        
        # Resource limits and requests
        resources:                     # Resource constraints
          requests:                    # Minimum resources required
            memory: "256Mi"            # Minimum 256MB RAM
            cpu: "250m"                # Minimum 0.25 CPU cores
          limits:                      # Maximum resources allowed
            memory: "512Mi"            # Maximum 512MB RAM
            cpu: "500m"                # Maximum 0.5 CPU cores
        
        # Health checks
        livenessProbe:                 # Check if container is alive
          httpGet:                     # HTTP GET request for health check
            path: /v1/sys/health       # Vault health endpoint
            port: 8200                 # Port to check
            scheme: HTTPS              # Use HTTPS for secure communication
          initialDelaySeconds: 30      # Wait 30 seconds before first check
          periodSeconds: 10            # Check every 10 seconds
          timeoutSeconds: 5            # Wait 5 seconds for response
          failureThreshold: 3          # Mark unhealthy after 3 failures
        
        readinessProbe:                # Check if container is ready to serve traffic
          httpGet:                     # HTTP GET request for readiness check
            path: /v1/sys/health       # Vault health endpoint
            port: 8200                 # Port to check
            scheme: HTTPS              # Use HTTPS for secure communication
          initialDelaySeconds: 5       # Wait 5 seconds before first check
          periodSeconds: 5             # Check every 5 seconds
          timeoutSeconds: 3            # Wait 3 seconds for response
          failureThreshold: 3          # Mark not ready after 3 failures
        
        # Volume mounts
        volumeMounts:                  # Mount volumes in the container
        - name: vault-config           # Mount the configmap as a volume
          mountPath: /vault/config     # Where to mount the configuration
          readOnly: true               # Mount as read-only
        - name: vault-data             # Mount the data volume
          mountPath: /vault/data       # Where to mount the data
        - name: vault-logs             # Mount the logs volume
          mountPath: /vault/logs       # Where to mount the logs
        - name: vault-tls              # Mount the TLS certificates
          mountPath: /vault/tls        # Where to mount the TLS certificates
          readOnly: true               # Mount as read-only
      
      # Volumes available to the pod
      volumes:                         # Volumes to mount in the pod
      - name: vault-config             # Configuration volume
        configMap:                     # Volume from a ConfigMap
          name: vault-config           # Name of the ConfigMap
          defaultMode: 0644            # File permissions (readable by all, writable by owner)
      - name: vault-data               # Data volume for Vault storage
        persistentVolumeClaim:         # Volume from a PersistentVolumeClaim
          claimName: vault-data-pvc    # Name of the PVC
      - name: vault-logs               # Logs volume
        emptyDir:                      # Temporary directory for logs
          sizeLimit: 100Mi             # Maximum size of 100MB
      - name: vault-tls                # TLS certificates volume
        secret:                        # Volume from a Secret
          secretName: terrarium-tls    # Name of the secret containing TLS certificates
          defaultMode: 0444            # File permissions (readable by all)
