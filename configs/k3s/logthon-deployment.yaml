# =============================================================================
# LOGTHON DEPLOYMENT
# =============================================================================
# This deployment runs the Logthon log aggregation service in Kubernetes.
# Logthon collects logs from Custom client and service-sink containers and
# provides a web UI for real-time log viewing with color-coded output.
#
# Key Concepts:
# - Deployment: Manages Pod replicas and rolling updates
# - FastAPI: Python web framework for building APIs
# - WebSocket: Real-time bidirectional communication
# - Log Aggregation: Collects logs from multiple sources
# - Security Context: Runs containers with non-root user
#
# Impact:
# - Provides centralized log viewing for all services
# - Enables real-time log streaming via WebSocket
# - Color-codes logs by service for easy identification
# - Provides web UI accessible through ingress
# - Collects logs from Custom client and service-sink
# - Runs with security best practices (non-root user)
#
# Documentation: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# =============================================================================

apiVersion: apps/v1                # Apps API version for Deployment resources
kind: Deployment                   # Resource type - creates a deployment
metadata:                          # Metadata about this deployment
  name: logthon                   # Name of the deployment
  namespace: edge-terrarium        # Namespace where this resource lives
  labels:                          # Labels for organizing resources
    app: logthon                   # Identifies this as the logthon app
    project: edge-terrarium        # Identifies this as part of the edge-terrarium project
    environment: development       # Identifies this as a development environment
    component: logging             # Identifies this as a logging component
spec:                              # Specification of the deployment
  replicas: 1                      # Number of Pod replicas to maintain (single instance for development)

  # Deployment strategy - use Recreate to ensure only one pod at a time
  # This prevents multiple instances from running simultaneously
  strategy:
    type: Recreate                 # Terminate old pods before creating new ones

  # Selector tells the deployment which Pods it manages
  selector:
    matchLabels:                   # Pods with these labels are managed by this deployment
      app: logthon                 # Must match the labels in the Pod template below

  # Template defines how new Pods should be created
  template:
    metadata:                      # Metadata for Pods created from this template
      labels:                      # Labels applied to each Pod
        app: logthon               # Must match the selector above
        project: edge-terrarium    # Identifies this as part of the edge-terrarium project
        environment: development   # Identifies this as a development environment
        component: logging         # Identifies this as a logging component

    spec:                          # Specification for Pods created from this template
      # Init container to wait for vault-init job to complete
      # This ensures logthon starts after Vault secrets are available
      initContainers:
      - name: wait-for-vault-init      # Name of the init container
        image: curlimages/curl:latest  # Lightweight curl image for health checks
        command: ['sh', '-c']          # Command to run
        args:                          # Arguments for the command
        - |                            # Multi-line script
          echo "Waiting for vault-init job to complete..."
          
          # Wait for vault-init job to complete by checking if secrets are available
          # This ensures logthon can start and be ready for other services
          RETRY_COUNT=0
          MAX_RETRIES=60  # 2 minutes max wait time
          until curl -s -H "X-Vault-Token: root" http://vault.edge-terrarium.svc.cluster.local:8200/v1/secret/data/custom-client/config > /dev/null; do
            RETRY_COUNT=$((RETRY_COUNT + 1))
            if [ $RETRY_COUNT -gt $MAX_RETRIES ]; then
              echo "ERROR: Timeout waiting for vault-init job to complete after $MAX_RETRIES attempts"
              echo "This indicates the vault-init job failed or is taking too long"
              exit 1
            fi
            echo "Vault-init job not complete yet (attempt $RETRY_COUNT/$MAX_RETRIES). Waiting..."
            sleep 2
          done
          echo "Vault initialization complete! Logthon can start."
        resources:                     # Resource requirements for init container
          requests:                    # Minimum resources required
            memory: "32Mi"             # 32 MB of memory
            cpu: "50m"                 # 50 millicores of CPU
          limits:                      # Maximum resources allowed
            memory: "64Mi"             # 64 MB of memory
            cpu: "100m"                # 100 millicores of CPU
      
      containers:                  # List of containers in each Pod
      - name: logthon              # Name of the container
        image: edge-terrarium-logthon:latest  # Docker image to use
        imagePullPolicy: Never     # Never pull from registry (use local image for development)

        # Ports exposed by the container
        ports:
        - containerPort: 5000      # Port the container listens on
          name: http               # Name for referencing this port
          protocol: TCP            # Protocol (TCP or UDP)

        # Environment variables passed to the container
        env:
        - name: SERVICE_NAME       # Environment variable for service identification
          value: "logthon"
        - name: LOGTHON_HOST       # Host to bind to (0.0.0.0 means all interfaces)
          value: "0.0.0.0"
        - name: LOGTHON_PORT       # Port to listen on
          value: "5000"
        - name: LOGTHON_LOG_LEVEL  # Logging level
          value: "INFO"
        - name: FILE_STORAGE_URL   # File storage service URL for K3s
          value: "http://file-storage-service.edge-terrarium.svc.cluster.local:9000"
        - name: CONTAINER_NAME     # Container name for logging
          valueFrom:
            fieldRef:
              fieldPath: metadata.name  # Use pod name as container name
        - name: POD_NAME           # Pod name for logging
          valueFrom:
            fieldRef:
              fieldPath: metadata.name  # Use pod name

        # Resource requirements and limits
        resources:
          requests:                # Minimum resources required
            memory: "128Mi"        # 128 megabytes of memory
            cpu: "100m"            # 100 millicores of CPU (0.1 cores)
          limits:                  # Maximum resources allowed
            memory: "512Mi"        # 512 megabytes of memory
            cpu: "500m"            # 500 millicores of CPU (0.5 cores)

        # Health check to determine if the container is alive
        livenessProbe:
          httpGet:                 # HTTP GET request to check health
            path: /health          # Health check endpoint
            port: 5000             # Port to check
            scheme: HTTP           # Use HTTP (not HTTPS)
          initialDelaySeconds: 30  # Wait 30 seconds before first check
          periodSeconds: 30        # Check every 30 seconds
          timeoutSeconds: 10       # Wait 10 seconds for response
          failureThreshold: 3      # Restart after 3 consecutive failures
          successThreshold: 1      # Mark healthy after 1 success

        # Health check to determine if the container is ready to serve traffic
        readinessProbe:
          httpGet:                 # HTTP GET request to check readiness
            path: /health          # Health check endpoint
            port: 5000             # Port to check
            scheme: HTTP           # Use HTTP (not HTTPS)
          initialDelaySeconds: 10  # Wait 10 seconds before first check
          periodSeconds: 10        # Check every 10 seconds
          timeoutSeconds: 5        # Wait 5 seconds for response
          failureThreshold: 3      # Mark not ready after 3 consecutive failures
          successThreshold: 1      # Mark ready after 1 success

        # Security context for the container
        securityContext:
          runAsNonRoot: true       # Don't run as root user (security best practice)
          runAsUser: 1000          # Run as user ID 1000
          runAsGroup: 1000         # Run as group ID 1000
          allowPrivilegeEscalation: false  # Don't allow privilege escalation
          readOnlyRootFilesystem: false    # Allow writing to root filesystem (needed for logs)
          capabilities:
            drop:                  # Remove capabilities
            - ALL                  # Remove all capabilities (principle of least privilege)

      # Pod security context
      securityContext:
        runAsNonRoot: true         # Don't run as root user
        runAsUser: 1000            # Run as user ID 1000
        runAsGroup: 1000           # Run as group ID 1000
        fsGroup: 1000              # Set filesystem group ID

      # Restart policy for containers in the Pod
      restartPolicy: Always        # Always restart containers if they fail

      # Termination grace period
      terminationGracePeriodSeconds: 30  # Wait 30 seconds before force killing

      # DNS policy
      dnsPolicy: ClusterFirst      # Use cluster DNS first, then fallback to host DNS
