# =============================================================================
# VAULT DEPLOYMENT FOR K3S
# =============================================================================
# Vault deployment for K3s with persistent storage
# Uses file storage backend for data persistence across restarts
#
# Key Concepts:
# - Deployment: Manages a set of identical pods
# - Recreate Strategy: Ensures only one pod runs at a time (important for Vault)
# - Health Probes: Monitor pod health and restart if needed
# - Resource Limits: Control CPU and memory usage
# - Environment Variables: Configure Vault behavior
#
# Impact:
# - Runs Vault in development mode for easy setup
# - Uses single replica to prevent data conflicts
# - Provides health checks for automatic recovery
# - Sets resource limits to prevent resource exhaustion
# - Configures logging for Kubernetes log collection
#
# Documentation: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
# =============================================================================

apiVersion: apps/v1                    # Apps API version for Deployment resources
kind: Deployment                       # Resource type - creates a deployment
metadata:                              # Metadata about this deployment
  name: vault                         # Name of the deployment
  namespace: edge-terrarium           # Namespace where this deployment lives
  labels:                             # Labels for organization and selection
    app: vault                        # Identifies this as a Vault deployment
    project: edge-terrarium           # Identifies this as part of the edge-terrarium project
    environment: development          # Identifies this as a development environment
spec:                                  # Specification for the deployment
  replicas: 1                         # Number of pod replicas (1 for Vault to prevent conflicts)
  
  # Deployment strategy - use Recreate to ensure only one pod at a time
  # This is important for Vault because multiple instances can cause data corruption
  # Recreate strategy terminates the old pod before creating a new one
  strategy:
    type: Recreate                    # Terminate old pods before creating new ones
  
  # Selector to match pods managed by this deployment
  selector:
    matchLabels:
      app: vault                      # Must match the labels in the pod template
  
  # Pod template - defines how pods should be created
  template:
    metadata:                         # Metadata for pods created from this template
      labels:                         # Labels applied to each pod
        app: vault                    # Must match the selector above
        project: edge-terrarium       # Identifies this as part of the edge-terrarium project
        environment: development      # Identifies this as a development environment
    spec:                             # Specification for pods
      containers:                     # List of containers in the pod
      - name: vault                   # Name of the container
        image: hashicorp/vault:latest # Official Vault Docker image
        command: ["vault"]            # Override the default entrypoint
        args: ["server", "-dev", "-dev-root-token-id=root", "-dev-listen-address=0.0.0.0:8200"]
        # Development mode arguments:
        # - server: Start Vault server
        # - -dev: Enable development mode (starts unsealed)
        # - -dev-root-token-id=root: Set root token to "root"
        # - -dev-listen-address=0.0.0.0:8200: Listen on all interfaces on port 8200
        
        ports:                        # Ports exposed by the container
        - containerPort: 8200         # Vault API port
          name: http                  # Name for the port (referenced in service)
          protocol: TCP               # Protocol used by the port
        
        env:                          # Environment variables for the container
        - name: VAULT_ADDR            # Vault API address
          value: "http://0.0.0.0:8200"
        - name: VAULT_API_ADDR        # Vault API address for cluster communication
          value: "http://vault.edge-terrarium.svc.cluster.local:8200"
        - name: VAULT_LOG_LEVEL       # Logging level
          value: "INFO"
        - name: VAULT_LOG_FORMAT      # Log format (json for better parsing)
          value: "json"
        
        # Volume mounts are commented out because we're using dev mode
        # In production, you would uncomment these to use persistent storage
        # volumeMounts:
        # - name: vault-config         # Mount the configmap
        #   mountPath: /vault/config   # Mount point in container
        # - name: vault-data           # Mount the persistent volume
        #   mountPath: /vault/data     # Mount point in container
        
        resources:                    # Resource requirements and limits
          requests:                   # Minimum resources required
            memory: "256Mi"           # Request 256MB of memory
            cpu: "250m"               # Request 250 millicores of CPU
          limits:                     # Maximum resources allowed
            memory: "512Mi"           # Limit to 512MB of memory
            cpu: "500m"               # Limit to 500 millicores of CPU
        
        # Health check to determine if the container is alive
        livenessProbe:
          httpGet:                    # HTTP GET request to check health
            path: /v1/sys/health      # Vault health endpoint
            port: 8200                # Port to check
            scheme: HTTP              # Use HTTP (not HTTPS)
          initialDelaySeconds: 30     # Wait 30 seconds before first check
          periodSeconds: 10           # Check every 10 seconds
          timeoutSeconds: 5           # Wait 5 seconds for response
          failureThreshold: 3         # Restart after 3 consecutive failures
        
        # Health check to determine if the container is ready to receive traffic
        readinessProbe:
          httpGet:                    # HTTP GET request to check readiness
            path: /v1/sys/health      # Vault health endpoint
            port: 8200                # Port to check
            scheme: HTTP              # Use HTTP (not HTTPS)
          initialDelaySeconds: 5      # Wait 5 seconds before first check
          periodSeconds: 5            # Check every 5 seconds
          timeoutSeconds: 3           # Wait 3 seconds for response
          failureThreshold: 3         # Mark as not ready after 3 consecutive failures
      
      # Volumes are commented out because we're using dev mode
      # In production, you would uncomment these to use persistent storage
      # volumes:
      # - name: vault-config           # ConfigMap volume
      #   configMap:
      #     name: vault-config         # Reference to the configmap
      # - name: vault-data             # Persistent volume
      #   persistentVolumeClaim:
      #     claimName: vault-data-pvc  # Reference to the PVC
