# =============================================================================
# KUSTOMIZATION CONFIGURATION FOR K3S
# =============================================================================
# Kustomize is a tool for customizing Kubernetes YAML configurations.
# It allows you to manage multiple environments (dev, staging, prod) with
# a single set of base configurations and overlays.
#
# Key Concepts:
# - Kustomization: Defines how to build a customized set of Kubernetes resources
# - Resources: List of YAML files to include in the build
# - Namespace: Default namespace for all resources
# - CommonLabels: Labels applied to all resources
# - Images: Image name and tag transformations
#
# Impact:
# - Manages the order of resource deployment
# - Ensures vault-init-job runs before Custom client
# - Applies consistent labels to all resources
# - Transforms image tags to latest for development
# - Provides single command deployment via kubectl apply -k
#
# Documentation: https://kustomize.io/
# =============================================================================

apiVersion: kustomize.config.k8s.io/v1beta1  # Kustomize API version
kind: Kustomization                          # Resource type - creates a kustomization

# Default namespace for all resources in this kustomization
namespace: edge-terrarium

# List of Kubernetes resource files to include in the build
# These files will be processed and customized according to the rules below
# IMPORTANT: Order matters - resources are applied in the order listed
resources:
  - namespace.yaml                    # Creates the edge-terrarium namespace
  - vault-config.yaml                # Vault configuration ConfigMap
  - vault-pvc.yaml                   # Vault persistent volume claim
  - vault-deployment.yaml            # Vault deployment
  - vault-service.yaml               # Vault service
  - vault-init-job.yaml              # Vault initialization job (must run first)
  - custom-client-deployment.yaml       # Custom client application deployment (waits for vault-init)
  - service-sink-deployment.yaml     # Service sink application deployment
  - logthon-deployment.yaml          # Logthon log aggregation service deployment
  - logthon-service.yaml             # Logthon LoadBalancer service (direct access)
  - logthon-ingress-service.yaml     # Logthon ClusterIP service (ingress routing)
  - services.yaml                    # Kubernetes services for both applications
  - ingress.yaml                     # Ingress configuration for routing with Kong
  - logthon-ingress.yaml             # Logthon-specific ingress with path stripping

# Common labels applied to all resources
# These labels help with organization and resource selection
commonLabels:
  project: edge-terrarium           # Identifies all resources as part of the edge-terrarium project
  environment: development          # Identifies this as a development environment

# Image transformations
# These rules modify image names and tags in the resource files
# This ensures all images use the 'latest' tag for development
images:
  - name: edge-terrarium-custom-client  # Name of the image to transform
    newTag: latest                   # New tag to apply to this image
  - name: edge-terrarium-service-sink # Name of the image to transform
    newTag: latest                   # New tag to apply to this image
  - name: edge-terrarium-logthon     # Name of the image to transform
    newTag: latest                   # New tag to apply to this image
