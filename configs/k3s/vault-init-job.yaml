# =============================================================================
# VAULT INITIALIZATION JOB FOR K3S
# =============================================================================
# This job initializes Vault with the required secrets for K3s
#
# Key Concepts:
# - Job: Runs a task to completion (one-time execution)
# - Init Container: Runs before main application containers start
# - Vault KV Store: Key-value storage for secrets
# - Base64 Encoding: Encodes binary data for storage
# - Conditional Logic: Handles missing certificates gracefully
#
# Impact:
# - Automatically populates Vault with required secrets
# - Ensures Custom client can retrieve secrets on startup
# - Handles both real and mock TLS certificates
# - Runs once and completes successfully
# - Provides consistent secrets between Docker Compose and K3s
#
# Documentation: https://kubernetes.io/docs/concepts/workloads/controllers/job/
# =============================================================================

apiVersion: batch/v1                   # Batch API version for Job resources
kind: Job                              # Resource type - creates a job
metadata:                              # Metadata about this job
  name: vault-init                    # Name of the job
  namespace: edge-terrarium           # Namespace where this job lives
  labels:                             # Labels for organization and selection
    app: vault-init                   # Identifies this as a Vault initialization job
    project: edge-terrarium           # Identifies this as part of the edge-terrarium project
    environment: development          # Identifies this as a development environment
spec:                                  # Specification for the job
  template:                           # Pod template for the job
    metadata:                         # Metadata for pods created from this template
      labels:                         # Labels applied to each pod
        app: vault-init               # Must match the selector
        project: edge-terrarium       # Identifies this as part of the edge-terrarium project
        environment: development      # Identifies this as a development environment
    spec:                             # Specification for pods
      restartPolicy: OnFailure        # Restart pod if it fails (but not if it succeeds)
      containers:                     # List of containers in the pod
      - name: vault-init             # Name of the container
        image: hashicorp/vault:latest # Official Vault Docker image
        command: ['sh', '-c']        # Override the default entrypoint
        args:                        # Arguments for the command
          - |                        # Multi-line script
            set -e  # Exit on any error
            
            # Set Vault environment variables
            export VAULT_ADDR="http://vault.edge-terrarium.svc.cluster.local:8200"
            export VAULT_TOKEN="root"
            
            echo "Vault initialization starting..."
            echo "VAULT_ADDR: $VAULT_ADDR"
            echo "VAULT_TOKEN: $VAULT_TOKEN"
            
            # Wait for Vault to be ready before proceeding
            echo "Waiting for Vault to be ready..."
            for i in {1..30}; do
              if vault status >/dev/null 2>&1; then
                echo "Vault is ready!"
                break
              fi
              echo "Vault is not ready yet. Waiting... (attempt $i/30)"
              sleep 2
            done
            
            # Check if Vault is actually ready
            if ! vault status >/dev/null 2>&1; then
              echo "ERROR: Vault is not ready after 60 seconds"
              exit 1
            fi
            
            echo "Vault is ready. Initializing secrets..."
            
            # Enable KV secrets engine if not already enabled
            echo "Checking if KV secrets engine is enabled..."
            if ! vault secrets list | grep -q "secret/"; then
              echo "Enabling KV secrets engine..."
              vault secrets enable -path=secret kv-v2
            else
              echo "KV secrets engine is already enabled"
            fi
            
            # Store TLS certificates (if available)
            # This handles both real certificates and mock certificates
            if [ -f /tmp/certs/edge-terrarium.crt ] && [ -f /tmp/certs/edge-terrarium.key ]; then
              echo "Storing TLS certificates..."
              # Store real TLS certificates in base64 format
              vault kv put secret/terrarium/tls \
                cert="$(cat /tmp/certs/edge-terrarium.crt | base64 -w 0)" \
                key="$(cat /tmp/certs/edge-terrarium.key | base64 -w 0)" \
                ca="$(cat /tmp/certs/edge-terrarium.crt | base64 -w 0)"
              echo "TLS certificates stored successfully"
            else
              echo "TLS certificates not found, storing mock TLS secrets..."
              # Store mock TLS certificates for development
              vault kv put secret/terrarium/tls \
                cert="mock-cert" \
                key="mock-key" \
                ca="mock-ca"
              echo "Mock TLS secrets stored successfully"
            fi
            
            # Store Custom client configuration (matching Docker Compose)
            # These secrets are used by the Custom client application
            echo "Storing Custom client configuration..."
            vault kv put secret/custom-client/config \
              api_key="mock-api-key-12345" \
              database_url="postgresql://mock-user:mock-pass@mock-db:5432/mock-db" \
              jwt_secret="mock-jwt-secret-67890" \
              encryption_key="mock-encryption-key-abcdef" \
              log_level="INFO" \
              max_connections="100"
            echo "Custom client configuration stored successfully"
            
            # Store Custom client external APIs configuration
            # These secrets are used for external API integrations
            echo "Storing Custom client external APIs configuration..."
            vault kv put secret/custom-client/external-apis \
              provider_auth_token="mock-provider-token-xyz" \
              webhook_secret="mock-webhook-secret-123" \
              rate_limit="1000" \
              timeout_seconds="30"
            echo "Custom client external APIs configuration stored successfully"
            
            # Verify secrets were stored
            echo "Verifying secrets were stored..."
            if vault kv get secret/custom-client/config >/dev/null 2>&1; then
              echo "✓ Custom client config secret verified"
            else
              echo "✗ ERROR: Custom client config secret not found"
              exit 1
            fi
            
            if vault kv get secret/custom-client/external-apis >/dev/null 2>&1; then
              echo "✓ Custom client external APIs secret verified"
            else
              echo "✗ ERROR: Custom client external APIs secret not found"
              exit 1
            fi
            
            if vault kv get secret/terrarium/tls >/dev/null 2>&1; then
              echo "✓ TLS secrets verified"
            else
              echo "✗ ERROR: TLS secrets not found"
              exit 1
            fi
            
            echo "Vault initialization completed successfully!"
        
        env:                          # Environment variables for the container
        - name: VAULT_ADDR            # Vault API address
          value: "http://vault.edge-terrarium.svc.cluster.local:8200"
        - name: VAULT_TOKEN           # Vault authentication token
          value: "root"
        
        volumeMounts:                 # Mount volumes into the container
        - name: tls-certs             # Mount the TLS certificates secret
          mountPath: /tmp/certs       # Mount point in container
          readOnly: true              # Mount as read-only
      
      volumes:                        # Volumes available to the pod
      - name: tls-certs               # TLS certificates volume
        secret:                       # Volume from a Kubernetes secret
          secretName: edge-terrarium-tls # Name of the secret
          optional: true              # Don't fail if secret doesn't exist
