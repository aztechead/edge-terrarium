# =============================================================================
# APPLICATION SERVICES - Docker Compose Configuration
# =============================================================================
# This file defines the main application services:
# - custom-client (handles specific API routes)
# - service-sink (handles default routes)
#
# These services depend on core services and provide the main application logic.
# =============================================================================

services:
  # ==========================================================================
  # Custom CLIENT SERVICE
  # ==========================================================================
  # This service handles requests to /fake-provider/* and /example-provider/* paths
  # It's written in C and parses HTTP requests, writing them to files
  custom-client:
    # Use pre-built image from build script
    image: edge-terrarium-custom-client:latest
    
    # Container name - makes it easier to reference in logs and commands
    container_name: edge-terrarium-custom-client
    
    # Port mapping - maps host port to container port
    # Format: "HOST_PORT:CONTAINER_PORT"
    # Note: Custom client is accessed through Kong gateway, so no direct port mapping needed
    # ports:
    #   - "9001:1337"  # HTTP port - Custom client listens on port 1337 inside container
    
    # Volume mounts - persistent storage for the container
    volumes:
      - custom-requests:/tmp/requests   # Named volume for storing request logs
    
    # Environment variables - passed to the container at runtime
    environment:
      - SERVICE_NAME=custom-client      # Identifies this service in logs
      - CONTAINER_NAME=edge-terrarium-custom-client  # Container name for logging
      - VAULT_ADDR=http://vault:8200 # Vault API address for Docker Compose
      - VAULT_TOKEN=root             # Vault authentication token
      - FILE_STORAGE_URL=http://file-storage:9000  # File storage API address for Docker Compose
    
    # Network configuration - connects container to custom network
    networks:
      - edge-terrarium-network      # Custom network for service communication
    
    # Dependencies - wait for vault-init, logthon, and file-storage to be ready
    depends_on:
      vault-init:                   # Wait for Vault initialization to complete
        condition: service_completed_successfully
      logthon:                      # Wait for logthon to be ready
        condition: service_healthy
      file-storage:                 # Wait for file-storage to be ready
        condition: service_healthy
    
    # Init container to wait for Vault to be ready
    init: true                      # Enable init container support
    
    # Restart policy - what to do if container stops
    restart: "no"                  # Don't automatically restart the container
    
    # Health check - how to determine if container is healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337/health"]  # Test if HTTP endpoint responds
      interval: 30s                 # Check every 30 seconds
      timeout: 10s                  # Wait 10 seconds for response
      retries: 3                    # Try 3 times before marking unhealthy
      start_period: 40s             # Wait 40 seconds before first check

  # ==========================================================================
  # SERVICE SINK
  # ==========================================================================
  # This service handles all other HTTP requests (default route)
  # It's also written in C and provides basic request processing
  # this is meant to simulate all other services in the system
  service-sink:
    # Use pre-built image from build script
    image: edge-terrarium-service-sink:latest
    
    # Container name
    container_name: edge-terrarium-service-sink
    
    # Port mapping
    ports:
      - "8080:8080"                 # HTTP port - service-sink listens on port 8080
    
    # Environment variables
    environment:
      - SERVICE_NAME=service-sink    # Identifies this service in logs
      - CONTAINER_NAME=edge-terrarium-service-sink  # Container name for logging
    
    # Network configuration
    networks:
      - edge-terrarium-network      # Custom network for service communication
    
    # Dependencies - wait for vault-init and logthon to be ready
    depends_on:
      vault-init:                   # Wait for Vault initialization to complete
        condition: service_completed_successfully
      logthon:                      # Wait for logthon to be ready
        condition: service_healthy
    
    # Restart policy
    restart: no                  # Don't automatically restart the container
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]  # Test if health endpoint responds
      interval: 30s                 # Check every 30 seconds
      timeout: 10s                  # Wait 10 seconds for response
      retries: 3                    # Try 3 times before marking unhealthy
      start_period: 40s             # Wait 40 seconds before first check

# =============================================================================
# VOLUMES
# =============================================================================
# Volumes provide persistent storage for containers
# Data in volumes survives container restarts and removals
volumes:
  custom-requests:                     # Named volume for Custom client request logs
    driver: local                   # Store on local filesystem

# =============================================================================
# NETWORKS
# =============================================================================
# Networks define how containers communicate with each other
# Custom networks provide better isolation and control
networks:
  edge-terrarium-network:           # Custom network name
    driver: bridge                  # Bridge driver for container communication
    ipam:                          # IP Address Management
      config:
        - subnet: 172.25.0.0/16    # Custom subnet for container IPs
