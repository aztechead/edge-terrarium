# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# =============================================================================
# KUBERNETES INGRESS TEMPLATE
# =============================================================================
# This template generates a Kubernetes Ingress manifest for the platform.
# It creates an NGINX-based ingress controller that routes external traffic to services.
#
# Template Variables:
#   {{ apps }} - List of application configurations from app-config.yml files
#   {{ global_config.namespace }} - Kubernetes namespace for the ingress
#   {{ global_config.project_name }} - Project name for resource naming
#   {{ global_config.host_name }} - Hostname for the ingress
#   {{ global_config.tls_secret_name }} - Name of the TLS secret
#
# Generated Resources:
#   - Ingress: Routes external traffic to internal services
#   - TLS Configuration: HTTPS termination with SSL certificates
#   - Path Rules: Dynamic routing based on app route configurations
#   - CORS Support: Cross-origin resource sharing configuration
#   - SSL Security: Modern TLS configuration and security headers
# =============================================================================

# Kubernetes API version for Ingress resource
# networking.k8s.io/v1 is the stable version for ingresses
apiVersion: networking.k8s.io/v1

# Resource type - Ingress manages external access to services
kind: Ingress

# =============================================================================
# METADATA
# =============================================================================
# Basic information about the ingress
metadata:
  name: {{ global_config.project_name }}-ingress    # Ingress name
  namespace: {{ global_config.namespace }}          # Kubernetes namespace
  
  # =============================================================================
  # NGINX INGRESS ANNOTATIONS
  # =============================================================================
  # Configure NGINX ingress controller behavior
  annotations:
    # Ingress class - use NGINX controller
    kubernetes.io/ingress.class: "nginx"
    
    # =============================================================================
    # SSL/TLS CONFIGURATION
    # =============================================================================
    # Force HTTPS redirect for all traffic
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Modern TLS configuration for security
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "HIGH:!aNULL:!MD5"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # =============================================================================
    # CORS CONFIGURATION
    # =============================================================================
    # Enable Cross-Origin Resource Sharing for web applications
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    
    # =============================================================================
    # ROUTING CONFIGURATION
    # =============================================================================
    # Enable regex matching for path patterns
    nginx.ingress.kubernetes.io/use-regex: "true"
    # Rewrite target - strips /api/ prefix and captures the rest
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    
    # =============================================================================
    # SECURITY AND PERFORMANCE ANNOTATIONS (Industry Best Practices)
    # =============================================================================
    # Force HTTPS redirect (security best practice)
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Enable HTTP/2 (performance best practice)
    nginx.ingress.kubernetes.io/http2-push-preload: "true"
    # Set secure headers (security best practice)
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
    # Enable CORS for API endpoints (common requirement)
    nginx.ingress.kubernetes.io/enable-cors: "true"

# =============================================================================
# INGRESS SPECIFICATION
# =============================================================================
# Defines how the ingress should behave
spec:
  # =============================================================================
  # TLS CONFIGURATION
  # =============================================================================
  # HTTPS termination with SSL certificates for all hosts
  tls:
  {%- set all_hosts = [global_config.host_name] -%}
  {%- for app in apps -%}
  {%- for route in app.routes -%}
  {%- if route.host and route.host not in all_hosts -%}
  {%- set _ = all_hosts.append(route.host) -%}
  {%- endif -%}
  {%- endfor -%}
  {%- endfor %}
  - hosts:
  {%- for host in all_hosts %}
    - {{ host }}                                    # Hostname for TLS
  {%- endfor %}
    secretName: {{ global_config.tls_secret_name }} # TLS secret containing certificates

  # =============================================================================
  # ROUTING RULES
  # =============================================================================
  # Define how external traffic is routed to internal services
  rules:
  # =============================================================================
  # HOST-BASED ROUTING
  # =============================================================================
  # Group routes by host and generate rules for each host
  {%- set hosts_routes = {} -%}
  {%- set default_host = global_config.host_name -%}
  
  {%- for app in apps -%}
  {%- for route in app.routes -%}
  {%- set route_host = route.host if route.host else default_host -%}
  {%- if route_host not in hosts_routes -%}
  {%- set _ = hosts_routes.update({route_host: []}) -%}
  {%- endif -%}
  {%- set specificity = route.path.count('*') + route.path.count('/') -%}
  {%- set _ = hosts_routes[route_host].append({
    'path': route.path, 
    'app': app.name, 
    'port': app.runtime.port, 
    'specificity': specificity, 
    'priority': route.priority,
    'strip_prefix': route.strip_prefix,
    'target': route.target,
    'is_catch_all': false
  }) -%}
  {%- endfor -%}
  {%- endfor -%}
  
  {%- for host, routes in hosts_routes.items() %}
  - host: {{ host }}                                # Hostname for routing
    http:
      paths:
      # =============================================================================
      # DYNAMIC ROUTE GENERATION FOR {{ host }}
      # =============================================================================
      # Routes for this specific host, sorted by priority and specificity
      # Routes for {{ host }}, sorted by priority (desc) then specificity (desc)
      {%- for route in routes | sort(attribute='is_catch_all') | sort(attribute='specificity', reverse=true) | sort(attribute='priority', reverse=true) %}
      # Route: {{ route.path }} -> {{ route.app }}:{{ route.port }} (priority: {{ route.priority }})
      {%- if route.strip_prefix %}
      - path: /api{{ route.path | replace('*', '(.*)') }}  # Add /api/ prefix and convert * to regex
      {%- else %}
      - path: {{ route.path | replace('*', '(.*)') }}      # Use path as-is and convert * to regex
      {%- endif %}
        pathType: ImplementationSpecific                   # Use NGINX-specific path matching
        backend:
          service:
            name: {{ route.app }}                          # Target service name
            port:
              number: {{ route.port }}                     # Target service port
      {%- endfor %}
      
      {%- if host == default_host %}
      # =============================================================================
      # DEFAULT HOST CATCH-ALL ROUTES
      # =============================================================================
      # Only add catch-all routes for the default host
      # Catch-all for unmatched /api/* requests (routes to service-sink)
      - path: /api/(.*)                            # Match any /api/* path
        pathType: ImplementationSpecific            # Use NGINX-specific path matching
        backend:
          service:
            name: service-sink                      # Default service for unmatched routes
            port:
              number: 8080                          # Service-sink port
      
      # Root path fallback (catch-all for non-API requests)
      - path: /                                    # Match root path
        pathType: ImplementationSpecific            # Use NGINX-specific path matching
        backend:
          service:
            name: service-sink                      # Default service for root requests
            port:
              number: 8080                          # Service-sink port
      {%- endif %}
  {%- endfor %}
