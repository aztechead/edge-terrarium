# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# =============================================================================
# KUBERNETES DATABASE DEPLOYMENT MANIFEST
# =============================================================================
# This template generates a Kubernetes Deployment for a PostgreSQL database.
# It creates a database instance for the {{ app.name }} application.
#
# Template Variables:
#   {{ app.name }} - The name of the application
#   {{ db_config.name }} - The name of the database
#   {{ db_config.version }} - PostgreSQL version
#   {{ global_config.namespace }} - Kubernetes namespace
#
# Generated Resources:
#   - Deployment: {{ app.name }}-{{ db_config.name }}-db
#   - Container: postgres:{{ db_config.version }}
#   - Volume: {{ app.name }}-{{ db_config.name }}-db-data
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ app.name }}-db
  namespace: {{ global_config.namespace }}
  labels:
    app: {{ app.name }}-db
    component: database
    service: {{ app.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ app.name }}-db
  template:
    metadata:
      labels:
        app: {{ app.name }}-db
        component: database
        service: {{ app.name }}
    spec:
      # =============================================================================
      # INIT CONTAINER FOR PERMISSIONS
      # =============================================================================
      initContainers:
      - name: fix-permissions
        image: postgres:{{ db_config.version }}
        command: ["sh", "-c", "chown -R 999:999 /var/lib/postgresql/data && chmod -R 700 /var/lib/postgresql/data"]
        volumeMounts:
        - name: {{ app.name }}-db-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
      
      # =============================================================================
      # CONTAINER SPECIFICATION
      # =============================================================================
      containers:
      - name: postgres
        image: postgres:{{ db_config.version }}
        
        # =============================================================================
        # PORT CONFIGURATION
        # =============================================================================
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        
        # =============================================================================
        # ENVIRONMENT VARIABLES
        # =============================================================================
        env:
        - name: POSTGRES_DB
          value: "{{ db_config.name }}"
        - name: POSTGRES_USER
          value: "{{ app.name }}_{{ db_config.name }}_user"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ app.name }}-db-secrets
              key: password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        
        # =============================================================================
        # VOLUME MOUNTS
        # =============================================================================
        volumeMounts:
        - name: {{ app.name }}-db-data
          mountPath: /var/lib/postgresql/data
        {% if db_config.init_scripts %}
        {% for script in db_config.init_scripts %}
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d/{{ script.split('/')[-1] }}
          subPath: {{ script.split('/')[-1] }}
        {% endfor %}
        {% endif %}
        
        # =============================================================================
        # RESOURCE REQUIREMENTS
        # =============================================================================
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        
        # =============================================================================
        # HEALTH CHECKS
        # =============================================================================
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - "{{ app.name }}_{{ db_config.name }}_user"
            - -d
            - "{{ db_config.name }}"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - "{{ app.name }}_{{ db_config.name }}_user"
            - -d
            - "{{ db_config.name }}"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        # =============================================================================
        # SECURITY CONTEXT
        # =============================================================================
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        
        # =============================================================================
        # VOLUME DEFINITIONS
        # =============================================================================
      volumes:
      - name: {{ app.name }}-db-data
        persistentVolumeClaim:
          claimName: {{ app.name }}-db-pvc
      {% if db_config.init_scripts %}
      - name: init-scripts
        configMap:
          name: {{ app.name }}-db-init-scripts
      {% endif %}
      
      # =============================================================================
      # RESTART POLICY
      # =============================================================================
      restartPolicy: Always
      
      # =============================================================================
      # NODE SELECTOR
      # =============================================================================
      # Uncomment to pin to specific nodes
      # nodeSelector:
      #   kubernetes.io/hostname: database-node
