# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# =============================================================================
# KUBERNETES INGRESS TEMPLATE
# =============================================================================
# This template generates a Kubernetes Ingress manifest for the platform.
# It creates an NGINX-based ingress controller that routes external traffic to services.
#
# Template Variables:
#   {{ apps }} - List of application configurations from app-config.yml files
#   {{ global_config.namespace }} - Kubernetes namespace for the ingress
#   {{ global_config.project_name }} - Project name for resource naming
#   {{ global_config.host_name }} - Hostname for the ingress
#   {{ global_config.tls_secret_name }} - Name of the TLS secret
#
# Generated Resources:
#   - Ingress: Routes external traffic to internal services
#   - TLS Configuration: HTTPS termination with SSL certificates
#   - Path Rules: Dynamic routing based on app route configurations
#   - CORS Support: Cross-origin resource sharing configuration
#   - SSL Security: Modern TLS configuration and security headers
# =============================================================================

# Kubernetes API version for Ingress resource
# networking.k8s.io/v1 is the stable version for ingresses
apiVersion: networking.k8s.io/v1

# Resource type - Ingress manages external access to services
kind: Ingress

# =============================================================================
# METADATA
# =============================================================================
# Basic information about the ingress
metadata:
  name: {{ global_config.project_name }}-ingress    # Ingress name
  namespace: {{ global_config.namespace }}          # Kubernetes namespace
  
  # =============================================================================
  # NGINX INGRESS ANNOTATIONS
  # =============================================================================
  # Configure NGINX ingress controller behavior
  annotations:
    # Ingress class - use NGINX controller
    kubernetes.io/ingress.class: "nginx"
    
    # =============================================================================
    # SSL/TLS CONFIGURATION
    # =============================================================================
    # Force HTTPS redirect for all traffic
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Modern TLS configuration for security
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-ciphers: "HIGH:!aNULL:!MD5"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    
    # =============================================================================
    # CORS CONFIGURATION
    # =============================================================================
    # Enable Cross-Origin Resource Sharing for web applications
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    
    # =============================================================================
    # ROUTING CONFIGURATION
    # =============================================================================
    # Enable regex matching for path patterns
    nginx.ingress.kubernetes.io/use-regex: "true"
    # Rewrite target - strips /api/ prefix and captures the rest
    nginx.ingress.kubernetes.io/rewrite-target: /$1

# =============================================================================
# INGRESS SPECIFICATION
# =============================================================================
# Defines how the ingress should behave
spec:
  # =============================================================================
  # TLS CONFIGURATION
  # =============================================================================
  # HTTPS termination with SSL certificates
  tls:
  - hosts:
    - {{ global_config.host_name }}                 # Hostname for TLS
    secretName: {{ global_config.tls_secret_name }} # TLS secret containing certificates

  # =============================================================================
  # ROUTING RULES
  # =============================================================================
  # Define how external traffic is routed to internal services
  rules:
  - host: {{ global_config.host_name }}             # Hostname for routing
    http:
      paths:
      # =============================================================================
      # DYNAMIC ROUTE GENERATION
      # =============================================================================
      # Collect all routes from all applications and sort by specificity
      {%- set all_routes = [] -%}
      {%- for app in apps -%}
      {%- for route in app.routes -%}
      {%- set specificity = route.path.count('*') + route.path.count('/') -%}
      {%- set _ = all_routes.append({'path': route.path, 'app': app.name, 'port': app.runtime.port, 'specificity': specificity, 'is_catch_all': false}) -%}
      {%- endfor -%}
      {%- endfor -%}
      # =============================================================================
      # APPLICATION ROUTES
      # =============================================================================
      # Routes are sorted by specificity (most specific first) for proper matching
      {%- for route in all_routes | sort(attribute='is_catch_all') | sort(attribute='specificity', reverse=true) %}
      # Route: {{ route.path }} -> {{ route.app }}:{{ route.port }}
      - path: /api{{ route.path | replace('*', '(.*)') }}  # Add /api/ prefix and convert * to regex
        pathType: ImplementationSpecific                   # Use NGINX-specific path matching
        backend:
          service:
            name: {{ route.app }}                          # Target service name
            port:
              number: {{ route.port }}                     # Target service port
      {%- endfor %}
      # =============================================================================
      # CATCH-ALL ROUTES
      # =============================================================================
      # Catch-all for unmatched /api/* requests (routes to service-sink)
      - path: /api/(.*)                            # Match any /api/* path
        pathType: ImplementationSpecific            # Use NGINX-specific path matching
        backend:
          service:
            name: service-sink                      # Default service for unmatched routes
            port:
              number: 8080                          # Service-sink port
      
      # Root path fallback (catch-all for non-API requests)
      - path: /                                    # Match root path
        pathType: ImplementationSpecific            # Use NGINX-specific path matching
        backend:
          service:
            name: service-sink                      # Default service for root requests
            port:
              number: 8080                          # Service-sink port
