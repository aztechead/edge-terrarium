# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# =============================================================================
# KUBERNETES DEPLOYMENT TEMPLATE
# =============================================================================
# This template generates a Kubernetes Deployment manifest for a single application.
# It creates a deployment that manages pods running the application container.
#
# Template Variables:
#   {{ app }} - Application configuration from app-config.yml
#   {{ global_config.namespace }} - Kubernetes namespace for the deployment
#   {{ global_config.project_name }} - Project name for labeling
#
# Generated Resources:
#   - Deployment: Manages pod replicas and rolling updates
#   - Pod Template: Defines container configuration and resources
#   - Health Checks: Liveness and readiness probes for reliability
#   - Security Context: Non-root user and security constraints
#   - Resource Limits: CPU and memory constraints for scheduling
# =============================================================================

# Kubernetes API version for Deployment resource
# apps/v1 is the stable version for deployments
apiVersion: apps/v1

# Resource type - Deployment manages pod replicas
kind: Deployment

# =============================================================================
# METADATA
# =============================================================================
# Basic information about the deployment
metadata:
  name: {{ app.name }}                              # Deployment name (must be unique in namespace)
  namespace: {{ global_config.namespace }}          # Kubernetes namespace
  labels:
    app: {{ app.name }}                             # App label for service selection
    project: {{ global_config.project_name }}       # Project label for organization

# =============================================================================
# DEPLOYMENT SPECIFICATION
# =============================================================================
# Defines how the deployment should behave
spec:
  # Number of pod replicas to maintain
  # 1 replica for single-instance applications
  replicas: 1

  # =============================================================================
  # POD SELECTOR
  # =============================================================================
  # Selects which pods this deployment manages
  # Must match the labels in the pod template
  selector:
    matchLabels:
      app: {{ app.name }}                           # Select pods with this label

  # =============================================================================
  # POD TEMPLATE
  # =============================================================================
  # Template for creating new pods
  template:
    metadata:
      labels:
        app: {{ app.name }}                         # Pod label (must match selector)
        project: {{ global_config.project_name }}   # Project label

    spec:

      # =============================================================================
      # CONTAINER DEFINITION
      # =============================================================================
      # Defines the application container
      containers:
      - name: {{ app.name }}                        # Container name

        # =============================================================================
        # IMAGE CONFIGURATION
        # =============================================================================
        # Container image to run
        {% if app.docker.image_name == 'hashicorp/vault' %}
        # Pre-built Vault image from HashiCorp
        image: {{ app.docker.image_name }}:{{ app.docker.tag }}
        {% else %}
        # Application image (built locally or pulled from registry)
        image: {{ app.docker.image_name }}:{{ app.docker.tag }}
        {% endif %}

        # =============================================================================
        # IMAGE PULL POLICY
        # =============================================================================
        # Controls when to pull the image
        {% if app.docker.build_context is defined and app.docker.build_context %}
        # Never pull - use local image (for development)
        imagePullPolicy: Never
        {% else %}
        # Pull if not present locally (for production)
        imagePullPolicy: IfNotPresent
        {% endif %}

        # =============================================================================
        # COMMAND AND ARGUMENTS
        # =============================================================================
        # Override default command and arguments
        {% if app.runtime.command %}
        # Custom command to run
        command: {{ app.runtime.command }}
        {% endif %}
        {% if app.runtime.args %}
        # Command arguments
        args: {{ app.runtime.args }}
        {% endif %}

        # =============================================================================
        # PORT CONFIGURATION
        # =============================================================================
        # Expose container ports
        ports:
        - containerPort: {{ app.runtime.port or 8080 }}     # Port the app listens on
          name: http                                 # Port name for service reference
        {% if app.runtime.ssl_port %}
        - containerPort: {{ app.runtime.ssl_port }}         # SSL port for HTTPS
          name: https                                # SSL port name for service reference
        {% endif %}

        # =============================================================================
        # ENVIRONMENT VARIABLES
        # =============================================================================
        # Pass environment variables to the container
        {% if app.environment or app.databases %}
        env:
          {% for env in app.environment %}
          # Environment variable: {{ env.name }}
          - name: {{ env.name }}
            {% if env.value %}
            # Static value
            value: "{{ env.value }}"
            {% elif env.value_from %}
            # Reference to Kubernetes field or secret
            valueFrom:
              fieldRef:
                fieldPath: {{ env.value_from }}
            {% endif %}
          {% endfor %}
          {% for db_config in app.databases %}
          {% if db_config.enabled %}
          # Database environment variables for {{ db_config.name }}
          - name: {{ db_config.type.upper() }}_DB_HOST
            value: "{{ app.name }}-db"
          - name: {{ db_config.type.upper() }}_DB_PORT
            value: "5432"
          - name: {{ db_config.type.upper() }}_DB_USER
            value: "{{ app.name }}_{{ db_config.name }}_user"
          - name: {{ db_config.type.upper() }}_DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ app.name }}-db-secrets"
                key: "password"
          - name: {{ db_config.type.upper() }}_DB_NAME
            value: "{{ db_config.name }}"
          - name: {{ db_config.type.upper() }}_DB_URL
            valueFrom:
              secretKeyRef:
                name: "{{ app.name }}-db-secrets"
                key: "url"
          {% endif %}
          {% endfor %}
        {% endif %}

        # =============================================================================
        # VOLUME MOUNTS
        # =============================================================================
        # Mount volumes into the container
        {% if app.volumes or app.name == 'nginx' %}
        volumeMounts:
          {% if app.name == 'nginx' %}
          # NGINX configuration files
          - name: nginx-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
          - name: nginx-config
            mountPath: /etc/nginx/conf.d/server.conf
            subPath: server.conf
          # SSL certificates
          - name: nginx-ssl
            mountPath: /etc/nginx/ssl
          {% endif %}
          # Application-specific volumes
          {% for volume in app.volumes %}
          - name: {{ volume.name }}                 # Volume: {{ volume.name }}
            mountPath: {{ volume.mount_path }}      # Mount point in container
          {% endfor %}
        {% endif %}

        # =============================================================================
        # HEALTH CHECKS
        # =============================================================================
        # Monitor container health and restart if needed
        {% if app.health_checks %}
        {% for check_name, check in app.health_checks.items() %}
        {% if check_name == 'liveness' %}
        # Liveness probe - restarts container if unhealthy
        livenessProbe:
          httpGet:
            path: {{ check.path }}                  # Health check endpoint
            port: {{ check.port }}                  # Port to check
          initialDelaySeconds: {{ check.period_seconds }}  # Wait before first check
          periodSeconds: {{ check.period_seconds }}        # Check interval
          timeoutSeconds: {{ check.timeout_seconds }}      # Response timeout
          failureThreshold: {{ check.failure_threshold }}  # Failures before restart
        {% elif check_name == 'readiness' %}
        # Readiness probe - removes pod from service if not ready
        readinessProbe:
          httpGet:
            path: {{ check.path }}                  # Health check endpoint
            port: {{ check.port }}                  # Port to check
          initialDelaySeconds: 5                    # Wait before first check
          periodSeconds: {{ check.period_seconds }}        # Check interval
          timeoutSeconds: {{ check.timeout_seconds }}      # Response timeout
          failureThreshold: {{ check.failure_threshold }}  # Failures before marking not ready
        {% endif %}
        {% endfor %}
        {% endif %}

        # =============================================================================
        # RESOURCE CONSTRAINTS
        # =============================================================================
        # CPU and memory limits for scheduling and resource management
        resources:
          # Minimum resources required (for scheduling)
          requests:
            cpu: {{ app.resources.cpu.request }}    # Minimum CPU allocation
            memory: {{ app.resources.memory.request }}  # Minimum memory allocation
          # Maximum resources allowed (prevents resource exhaustion)
          limits:
            cpu: {{ app.resources.cpu.limit }}      # Maximum CPU allocation
            memory: {{ app.resources.memory.limit }}    # Maximum memory allocation

        # =============================================================================
        # SECURITY CONTEXT
        # =============================================================================
        # Security settings for the container (Vault runs as root for security)
        {% if app.name != 'vault' %}
        securityContext:
          runAsNonRoot: {{ app.security.run_as_non_root | lower }}      # Run as non-root user
          runAsUser: {{ app.security.run_as_user }}                     # User ID to run as
          runAsGroup: {{ app.security.run_as_group }}                   # Group ID to run as
          allowPrivilegeEscalation: {{ app.security.allow_privilege_escalation | lower }}  # Prevent privilege escalation
          readOnlyRootFilesystem: {{ app.security.read_only_root_filesystem | lower }}    # Read-only root filesystem
        {% endif %}

      # =============================================================================
      # VOLUME DEFINITIONS
      # =============================================================================
      # Define volumes for the pod
      {% if app.volumes or app.name == 'nginx' %}
      volumes:
        {% if app.name == 'nginx' %}
        # NGINX configuration from ConfigMap
        - name: nginx-config
          configMap:
            name: nginx-config
        # SSL certificates from Secret
        - name: nginx-ssl
          secret:
            secretName: nginx-ssl
        {% else %}
        # Application-specific persistent volumes
        {% for volume in app.volumes %}
        - name: {{ volume.name }}                   # Volume: {{ volume.name }}
          persistentVolumeClaim:
            claimName: {{ volume.name }}-pvc        # PVC name for this volume
        {% endfor %}
        {% endif %}
      {% endif %}
