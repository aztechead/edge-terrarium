# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# =============================================================================
# DOCKER COMPOSE CONFIGURATION TEMPLATE
# =============================================================================
# This template generates a Docker Compose file for the Dynamic Microservices Platform.
# It creates service definitions for all applications based on their app-config.yml files.
#
# Template Variables:
#   {{ apps }} - List of application configurations from app-config.yml files
#   {{ global_config.network_name }} - Name of the Docker network for service communication
#
# Generated Services:
#   - Each app in the apps/ directory becomes a Docker Compose service
#   - Services are configured with build context, ports, environment, volumes, and health checks
#   - Special handling for nginx (gateway) and vault (secrets management)
#
# Service Dependencies:
#   - Vault starts first (no dependencies)
#   - All other services depend on Vault
#   - Custom dependencies can be defined in app-config.yml
# =============================================================================

# Docker Compose file format version
# Version 3.8 supports most modern Docker features including health checks and networks
version: '3.8'

# =============================================================================
# SERVICE DEFINITIONS
# =============================================================================
# Each application in the apps/ directory becomes a Docker Compose service
# Services are configured based on their app-config.yml files

services:
{% for app in apps %}
  # =============================================================================
  # {{ app.name.upper() }} SERVICE
  # =============================================================================
  # {{ app.description }}
  # 
  # Service Configuration:
  #   - Name: {{ app.name }}
  #   - Port: {{ app.runtime.port }}
  #   - Health Check: {{ app.runtime.health_check_path }}
  #   - Dependencies: {{ app.dependencies if app.dependencies else ['vault'] }}
  # =============================================================================
  {{ app.name }}:
    # =============================================================================
    # IMAGE CONFIGURATION
    # =============================================================================
    # Use pre-built image for Vault, build from source for all other apps
    # Vault uses the official HashiCorp image for security and reliability
    {% if app.docker.image_name == 'hashicorp/vault' %}
    # Pre-built Vault image from HashiCorp
    image: {{ app.docker.image_name }}:{{ app.docker.tag }}
    {% else %}
    # Build image from source using Dockerfile in app directory
    build:
      context: ./apps/{{ app.name }}              # Build context (app directory)
      dockerfile: {{ app.docker.dockerfile }}     # Dockerfile to use for building
    {% endif %}

    # =============================================================================
    # PORT MAPPING
    # =============================================================================
    # Map container ports to host ports for external access
    # Only services that need external access have port mappings
    {% if app.runtime.port_forward %}
    # Custom port forwarding defined in app-config.yml
    ports:
      - "{{ app.runtime.port_forward }}:{{ app.runtime.port }}"
    {% elif app.name == 'nginx' %}
    # NGINX gateway - maps HTTPS port 443 to host port 8443
    ports:
      - "8443:443"
    {% elif app.name == 'vault' %}
    # Vault UI and API - maps port 8200 to host port 8200
    ports:
      - "8200:8200"
    {% endif %}

    # =============================================================================
    # ENVIRONMENT VARIABLES
    # =============================================================================
    # Pass environment variables to the container
    # Variables can be static values or references to Vault secrets
    {% if app.environment or app.databases %}
    environment:
      {% for env in app.environment %}
      # Environment variable: {{ env.name }}
      {% if env.value %}
      - {{ env.name }}={{ env.value }}              # Static value
      {% elif env.value_from %}
      - {{ env.name }}={{ env.value_from }}         # Vault secret reference
      {% endif %}
      {% endfor %}
      {% for db_config in app.databases %}
      {% if db_config.enabled %}
      # Database environment variables for {{ db_config.name }}
      - {{ db_config.type.upper() }}_DB_HOST={{ app.name }}-db
      - {{ db_config.type.upper() }}_DB_PORT=5432
      - {{ db_config.type.upper() }}_DB_USER={{ app.name }}_user
      - {{ db_config.type.upper() }}_DB_PASSWORD=generated_password_placeholder
      - {{ db_config.type.upper() }}_DB_NAME={{ db_config.name }}
      - {{ db_config.type.upper() }}_DB_URL=postgresql://{{ app.name }}_user:generated_password_placeholder@{{ app.name }}-db:5432/{{ db_config.name }}
      {% endif %}
      {% endfor %}
    {% endif %}

    # =============================================================================
    # VOLUME MOUNTS
    # =============================================================================
    # Mount volumes for persistent storage and configuration files
    # App volumes are defined in app-config.yml
    # Special volumes are mounted for nginx configuration and SSL certificates
    {% if app.volumes or app.name == 'nginx' %}
    volumes:
      {% if app.volumes %}
      # Application-specific volumes from app-config.yml
      {% for volume in app.volumes %}
      - {{ volume.name }}:{{ volume.mount_path }}   # Volume: {{ volume.name }}
      {% endfor %}
      {% endif %}
      {% if app.name == 'nginx' %}
      # NGINX configuration files (read-only)
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/server.conf:/etc/nginx/conf.d/server.conf:ro
      # SSL certificates for HTTPS (read-only)
      - ../../certs/edge-terrarium.crt:/etc/nginx/ssl/tls.crt:ro
      - ../../certs/edge-terrarium.key:/etc/nginx/ssl/tls.key:ro
      {% endif %}
    {% endif %}

    # =============================================================================
    # SERVICE DEPENDENCIES
    # =============================================================================
    # Define startup order and dependencies between services
    # Vault starts first, then all other services depend on Vault
    # Custom dependencies can be defined in app-config.yml
    {% if app.dependencies %}
    # Custom dependencies from app-config.yml
    depends_on:
      {% for dep in app.dependencies %}
      - {{ dep }}                                   # Dependency: {{ dep }}
      {% endfor %}
    {% elif app.name != 'vault' %}
    # Default dependency on Vault for all services except Vault itself
    depends_on:
      - vault
    {% endif %}

    # =============================================================================
    # NETWORK CONFIGURATION
    # =============================================================================
    # Connect service to the platform network for inter-service communication
    networks:
      - {{ global_config.network_name }}            # Platform network

    # =============================================================================
    # RESTART POLICY
    # =============================================================================
    # Automatically restart container unless manually stopped
    # This ensures services stay running even after failures
    restart: unless-stopped

    # =============================================================================
    # HEALTH CHECK
    # =============================================================================
    # Monitor service health and restart if unhealthy
    # Health checks are essential for service reliability
    # 
    # By default, uses TCP socket check to avoid failures with apps that don't
    # implement HTTP health endpoints. Uncomment the HTTP check below if your
    # app implements proper health endpoints.
    healthcheck:
      # TCP socket check (default) - works with any app that opens a port
      test: ["CMD", "nc", "-z", "localhost", "{{ app.runtime.port }}"]
      # HTTP check (uncomment if your app has health endpoints):
      # test: ["CMD", "curl", "-f", "http://localhost:{{ app.runtime.port }}{{ app.runtime.health_check_path }}"]
      interval: 30s                                 # Check every 30 seconds
      timeout: 10s                                  # Wait up to 10 seconds for response
      retries: 3                                    # Mark unhealthy after 3 failures
      start_period: 30s                             # Wait 30 seconds before starting checks

{% endfor %}

{% for app in apps %}
{% for db_config in app.databases %}
{% if db_config.enabled %}
  # =============================================================================
  # {{ app.name.upper() }}-{{ db_config.name.upper() }} DATABASE SERVICE
  # =============================================================================
  # PostgreSQL database for {{ app.name }}
  # 
  # Database Configuration:
  #   - Name: {{ db_config.name }}
  #   - Version: {{ db_config.version }}
  #   - Port: {{ db_config.port_forward if db_config.port_forward else '5432' }}
  #   - User: {{ app.name }}_{{ db_config.name }}_user
  #   - Password: Generated and stored in Vault
  # =============================================================================
  {{ app.name }}-db:
    # =============================================================================
    # IMAGE CONFIGURATION
    # =============================================================================
    # Use official PostgreSQL image with specified version
    image: postgres:{{ db_config.version }}

    # =============================================================================
    # CONTAINER CONFIGURATION
    # =============================================================================
    container_name: edge-terrarium-{{ app.name }}-db
    {% if db_config.port_forward %}
    ports:
      - "{{ db_config.port_forward }}:5432"           # Custom port forwarding
    {% else %}
    ports:
      - "5432:5432"                                   # Default PostgreSQL port
    {% endif %}

    # =============================================================================
    # ENVIRONMENT VARIABLES
    # =============================================================================
    # Database configuration and credentials
    environment:
      - POSTGRES_DB={{ db_config.name }}              # Database name
      - POSTGRES_USER={{ app.name }}_user  # Database user
      - POSTGRES_PASSWORD=generated_password_placeholder  # Password from Vault
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 # Enhanced security

    # =============================================================================
    # VOLUME MOUNTS
    # =============================================================================
    # Persistent storage for database data
    volumes:
      - {{ app.name }}-db-data:/var/lib/postgresql/data
      {% if db_config.init_scripts %}
      {% for script in db_config.init_scripts %}
      - ../../apps/{{ app.name }}/{{ script }}:/docker-entrypoint-initdb.d/{{ script.split('/')[-1] }}:ro
      {% endfor %}
      {% endif %}

    # =============================================================================
    # NETWORK CONFIGURATION
    # =============================================================================
    # Connect to platform network for service communication
    networks:
      - {{ global_config.network_name }}

    # =============================================================================
    # RESTART POLICY
    # =============================================================================
    # Automatically restart database unless manually stopped
    restart: unless-stopped

    # =============================================================================
    # HEALTH CHECK
    # =============================================================================
    # Monitor database health and restart if unhealthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s                                    # Check every 30 seconds
      timeout: 10s                                     # Wait up to 10 seconds for response
      retries: 3                                       # Mark unhealthy after 3 failures
      start_period: 40s                                # Wait 40 seconds before starting checks

{% endif %}
{% endfor %}
{% endfor %}

# =============================================================================
# VOLUME DEFINITIONS
# =============================================================================
# Define named volumes for persistent storage
# Volumes persist data across container restarts and recreations
volumes:
{% for app in apps %}
  {% for volume in app.volumes %}
  # Volume for {{ app.name }}: {{ volume.name }}
  {{ volume.name }}:
  {% endfor %}
  {% for db_config in app.databases %}
  {% if db_config.enabled %}
  # Database volume for {{ app.name }}-db
  {{ app.name }}-db-data:
    driver: local
  {% endif %}
  {% endfor %}
{% endfor %}

# =============================================================================
# NETWORK DEFINITIONS
# =============================================================================
# Define custom network for service communication
# Bridge network allows services to communicate by name
networks:
  {{ global_config.network_name }}:
    driver: bridge                                  # Bridge network for container communication
