# {{ app_name }}

{{ app_description }}

## Overview

This application is part of the Dynamic Microservices Platform and is automatically configured for deployment in both Docker Compose and Kubernetes (K3s) environments.

## Quick Start

1. **Add your source code** to the `src/` directory
2. **Update the Dockerfile** as needed for your application
3. **Build the image**: `terrarium.py build`
4. **Deploy all apps**: `terrarium.py deploy`

## Configuration

This application is configured via `app-config.yml`, which serves as the single source of truth for deployment settings. The configuration file includes:

- **Docker settings**: Image name, build context, Dockerfile location
- **Runtime settings**: Port, health checks, startup timeout
- **Environment variables**: Static values and Vault secret references
- **Routing configuration**: API endpoints and path handling
- **Resource requirements**: CPU and memory limits for Kubernetes
- **Security settings**: User permissions and security context

## Development Workflow

### 1. Local Development
```bash
# Build the application image
terrarium.py build

# Deploy to Docker Compose for testing
terrarium.py deploy docker

# Run tests
terrarium.py test
```

### 2. Production Deployment
```bash
# Deploy to Kubernetes (K3s)
terrarium.py deploy k3s

# Check deployment status
terrarium.py status
```

### 3. Application Structure
```
{{ app_name }}/
├── src/                    # Your application source code
├── Dockerfile             # Container configuration
├── app-config.yml         # Deployment configuration
└── README.md              # This file
```

## API Routes

{% if routes %}
This application handles the following API routes:

{% for route in routes %}
- **{{ route.path }}** → {{ route.target }}
  - Strip prefix: {{ route.strip_prefix | lower }}
{% endfor %}

**Note**: The `/api/` prefix is automatically added by the NGINX ingress layer, so external requests will be prefixed accordingly.
{% else %}
- No routes configured

**To add routes**: Edit `app-config.yml` and add route definitions:
```yaml
routes:
  - path: /myapp/*
    target: /
    strip_prefix: true
```
{% endif %}

## Environment Variables

{% if environment_vars %}
This application uses the following environment variables:

{% for env in environment_vars %}
- **{{ env.name }}**: {{ env.value }}
{% endfor %}
{% else %}
- No environment variables configured

**To add environment variables**: Edit `app-config.yml` and add variable definitions:
```yaml
environment:
  - name: DATABASE_URL
    value: "postgresql://user:pass@localhost/db"
  - name: API_KEY
    value_from: "vault:secret/myapp#api_key"
```
{% endif %}

## Persistent Volumes

{% if volumes %}
This application uses the following persistent volumes:

{% for vol in volumes %}
- **{{ vol.name }}**: {{ vol.mount_path }} ({{ vol.size }}, {{ vol.access_mode }})
{% endfor %}
{% else %}
- No persistent volumes configured

**To add volumes**: Edit `app-config.yml` and add volume definitions:
```yaml
volumes:
  - name: data-volume
    mount_path: /app/data
    size: 10Gi
    access_mode: ReadWriteOnce
```
{% endif %}

## Health Checks

This application provides health check endpoints for monitoring:

- **Health endpoint**: `GET /health`
- **Expected response**: HTTP 200 with `{"status": "healthy"}`
- **Check interval**: Every 30 seconds (liveness), every 10 seconds (readiness)

## Security

The application runs with the following security settings:

- **Non-root user**: Runs as user ID 1001
- **Privilege escalation**: Disabled
- **Read-only filesystem**: Disabled (can be enabled for better security)

## Troubleshooting

### Common Issues

1. **Application won't start**: Check the logs with `docker logs <container-name>`
2. **Health checks failing**: Ensure your app responds to `GET /health`
3. **Routes not working**: Verify the route configuration in `app-config.yml`

### Useful Commands

```bash
# View application logs
terrarium.py logs {{ app_name }}

# Check application status
terrarium.py status

# Rebuild and redeploy
terrarium.py build && terrarium.py deploy

# Access application directly (Docker)
docker exec -it edge-terrarium-{{ app_name }} sh
```

## Platform Integration

This application is automatically integrated with the platform's:

- **NGINX Gateway**: Routes external traffic to the application
- **Vault Integration**: Secure secrets management
- **Logging System**: Centralized logging via Logthon
- **Health Monitoring**: Automatic health checks and restart policies
- **Service Discovery**: Automatic service registration and discovery
