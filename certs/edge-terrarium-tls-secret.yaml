# =============================================================================
# KUBERNETES TLS SECRET TEMPLATE
# =============================================================================
# This is a template file for the Kubernetes TLS Secret.
# The actual certificate data will be populated when you run the certificate generation script.
#
# Key Concepts:
# - Secret: Kubernetes resource for storing sensitive data
# - TLS Secret: Special type of secret for TLS certificates and keys
# - Base64 Encoding: Certificates and keys are base64 encoded in the secret
# - Data: The actual certificate and key data (base64 encoded)
#
# This template is automatically populated by the certificate generation script
# and contains the self-signed certificates for the Terrarium project.
#
# Documentation: https://kubernetes.io/docs/concepts/configuration/secret/
# =============================================================================

apiVersion: v1                    # Core API version for Secret resources
kind: Secret                      # Resource type - creates a secret
metadata:                         # Metadata about this secret
  name: edge-terrarium-tls        # Name of the secret
  namespace: edge-terrarium       # Namespace where this secret lives
type: kubernetes.io/tls           # Type of secret - TLS certificate and key

# The actual certificate and key data (base64 encoded)
# These values are populated by the certificate generation script
data:
  # Base64 encoded TLS certificate
  # This is the public certificate that clients will use to verify the server
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVNVENDQXhtZ0F3SUJBZ0lVTjN6WWF1UEZ6dmxGdWIyTjBSTG8rcDdzN3dnd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2dZQXhDekFKQmdOVkJBWVRBbFZUTVFzd0NRWURWUVFJREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeQpZVzVqYVhOamJ6RVhNQlVHQTFVRUNnd09SV1JuWlMxVVpYSnlZWEpwZFcweEZEQVNCZ05WQkFzTUMwUmxkbVZzCmIzQnRaVzUwTVIwd0d3WURWUVFEREJSbFpHZGxMWFJsY25KaGNtbDFiUzVzYjJOaGJEQWVGdzB5TlRBNU1EVXgKT0RRMU5UTmFGdzB5TmpBNU1EVXhPRFExTlROYU1JR0FNUXN3Q1FZRFZRUUdFd0pWVXpFTE1Ba0dBMVVFQ0F3QwpRMEV4RmpBVUJnTlZCQWNNRFZOaGJpQkdjbUZ1WTJselkyOHhGekFWQmdOVkJBb01Ea1ZrWjJVdFZHVnljbUZ5CmFYVnRNUlF3RWdZRFZRUUxEQXRFWlhabGJHOXdiV1Z1ZERFZE1Cc0dBMVVFQXd3VVpXUm5aUzEwWlhKeVlYSnAKZFcwdWJHOWpZV3d3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzNCd2lKeDlJbQpHVm9saGtVTFpaaDMveXBTTkt1aGt4eU8zUUVUZUJ5WHJBN0dWbjZkaFBDVmtvK0VOU2JrQTVXTDh3citGS3JqCnM1STN5NzJkbzRTdXJ4QmYxcEc4NFpmUGhDTjhPaVVpREZrODdPVWNpQWJiaXVydEdFQzhodkNJS1BWamZaQXYKd0JMTzZrOVZmRTAzdnB3ekdydjVkK3BQeWx3UEd4VSt4ZmtLaWV1OUhiYUc4eUF0eWhJaGJVczRKL1VUcklIdQpGOERqYzFMVnVhOFdBUWU1Z1F0c2VLSDQ0dDcwTGtFT0tibDRDT013R0VCbHJpZVNzMjBWakE0Z0JJN3RjaWJ1CjJmbE1WcnRxS3Z3MmRXVm1Dc0hjVGRXTzd5QTBUMG9uRDhjK3JObCt3djZ3cERiOTRRZEdIUTZSaENFK2lNNGYKRzJUa2UyeXpJWlcvQWdNQkFBR2pnYUF3Z1owd0N3WURWUjBQQkFRREFnUXdNQk1HQTFVZEpRUU1NQW9HQ0NzRwpBUVVGQndNQk1Gb0dBMVVkRVFSVE1GR0NGR1ZrWjJVdGRHVnljbUZ5YVhWdExteHZZMkZzZ2dsc2IyTmhiR2h2CmMzU0NGaW91WldSblpTMTBaWEp5WVhKcGRXMHViRzlqWVd5SEJIOEFBQUdIRUFBQUFBQUFBQUFBQUFBQUFBQUEKQUFFd0hRWURWUjBPQkJZRUZEYWVlbHZaN01NdXZkSm1QZW0zSVo0TXhEYkZNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBdEVJVlk2YUdrSi9LSzVHQktmNFhRVVJVTS9HcWd1aFluWXRYM2luMmlIQzRZSHZOenJEdW1vTVlICkhEaUZob0luek01Z2ZaSWUwTjl5U0J4N1NXTzZadmhqdDNwelBydHViMFZZemlpMG4za1hkZGRDY2J3dG1ZeWYKdk9XOHZmemdVbFExRk5lRkJWZGNTUWxDeklodVRna3dLZDJtdmdSZ2hSRmZudFdaWU1kOGs4NEQ5NDhBbFVDdwo4cTJwM0tZTkl3NFZBRDMrSXIvNmRPQ0V0M0xnTlAwTTZld0pJdlFIQ0JQeEVrYzBuSTI3OUtOWmRyTkxvNWphCmVxU21YcXhtUm9PdWpsUWsyRWU5ZXh1bUQyT1NPSGl0Z21kL1BVdFFtKzlmbVZmME5qRCs3UUxwWnlLZnEzWkcKeE9XdEtGeldKQzZ1L3V2aVJXY01yeTg3TW1IbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  
  # Base64 encoded TLS private key
  # This is the private key that the server uses to decrypt traffic
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQzNCd2lKeDlJbUdWb2wKaGtVTFpaaDMveXBTTkt1aGt4eU8zUUVUZUJ5WHJBN0dWbjZkaFBDVmtvK0VOU2JrQTVXTDh3citGS3JqczVJMwp5NzJkbzRTdXJ4QmYxcEc4NFpmUGhDTjhPaVVpREZrODdPVWNpQWJiaXVydEdFQzhodkNJS1BWamZaQXZ3QkxPCjZrOVZmRTAzdnB3ekdydjVkK3BQeWx3UEd4VSt4ZmtLaWV1OUhiYUc4eUF0eWhJaGJVczRKL1VUcklIdUY4RGoKYzFMVnVhOFdBUWU1Z1F0c2VLSDQ0dDcwTGtFT0tibDRDT013R0VCbHJpZVNzMjBWakE0Z0JJN3RjaWJ1MmZsTQpWcnRxS3Z3MmRXVm1Dc0hjVGRXTzd5QTBUMG9uRDhjK3JObCt3djZ3cERiOTRRZEdIUTZSaENFK2lNNGZHMlRrCmUyeXpJWlcvQWdNQkFBRUNnZ0VBU2dyWjNPZE44Q1RFYjdiRVdzcDBabUwvSzNkc1VYYVNrSWIrcHZJcDJ2LzcKa0Nnd202ZktyaSsyeUh5NktYYjd1anlOMzJEY0N6YTdlYi8rQ3ZZNk9ITFE5SHg0dzhrZG9aRXF5OWczNm5ERgpieHpFeVFpTWdhZE94N0RPaTVZcFcyUDZkWSszMDJGb0duWDJ0ellNaFBjaStKZWhvTmZ1bmUzVzFUT1hJaWZDCmVOeWZpOEw4NEZQanNnaExzc3pEYWJHK1dreGlCM3lzM043MDBCcmZRWGdMZ3BnOFRKK2RUNUJmYlFnaU1FREsKalhtbytVMkMwRnRQa2xIeEdtOTZrM21VYnQzQTc0VWIyUkdBRDY4RUxXNGVzMVNRQXRlSW1VRHFQZVVmZjRUNwptNUR5YWp6bWFZK1lCaDZQZG95NW44dkEzMUZZcldCRm94b3pOVUMrb1FLQmdRRDliZncyajFUOHYxM1kwWnBXClBUL256VStJRHIwUXZXZFFMQzdjdHBIUTQzd2ZzaW5yN3BKUk16TVNoQXR1WDdyZnhMZlgxMzlzak5PSFZPTFYKKzBvL1N6Y1Q1bHRiMHlZOVpmZGw2bVphVTNrSWppb09haG9icFlEbHcxTlVtSXpvMmZ5ZWJBSzJaUDgzV0M4UwpabkJlZlRwUGtLMWVMR1BiTm91Z3JLOGJZUUtCZ1FDNDRrRFFnWVRnc3Y2TkZ5TkVIQ05UTG5kT29JNVNHc0pGCmJ1ZFRDOXlTdlJaRDYvcHA1V2E1WHp5VjNUOEtQTHhqZGx0NUhTUXkwKzdqcm1sR0QvdURjR1VrQVU3bndTQU4KNVRyS1R3S2hBUENyRDR6NDFxNGNDVThrTTNRcm40S3Q0STJDTTNuNkZxbTRNUzF4cmRNV1c3emdUOVRjbWxvbgovaUZBU0NCbEh3S0JnRmErYnJXK0dianBSNVlQS0dTY1VtTmxRdk92RjhmRERMbkVaY1htTjhMb0duUSs1MXA2CkxscmN5MzVxOC82emhhTlNFaHN2Qjg1LzVXZE5CdGQzUzlLZVRCdmpuU0d4QkVXL3dRNkJUTWRlQ3UrQ3VhSjEKYnJwSHkvYlpCSXpRS21zSk1nNkhxZVlFYTlibHVEYjBHVUkrV3RjaERqWk51MkF0SzEyenZid0JBb0dBY3BqYgpMK0o0S0ljS1BRM3djQkU0M0NCYkYwTnhzL2FlSUVlRDN2ZmxPcGMxcTlnakdXeDE1Y1RnV3N3T2ZSdjBjWG8xCmJMYmhieGZxWlBvQWlzcnhUU0ZucjQrWUJ4S3YrYXp5YWQvYmMweVA0SmY4KzJpbDl2N1dMVXd2WDdLNVgybG0KalNPM0lZclduREx2UmgxR1QvK0E3VkRPVWdiaWh4T0FMTVlJUG1VQ2dZQVFMa1ZsQ25mMHpvMDBMY3NNbWtoQgpoZjg2WkNKNS9ZNHF4VTMvVU9OQmZ4UXdpcUFFYmpIRHQ1VjBDZGR3VlRRcTBXWnVLU0xoMWkwS0ZVMlMrL3NsCmlISCtNaDJ4Z3ZwczNoNXNDMWRkZnNuaDlaaDNhSlNVM0s4b2xmUWE0eTFzWVllMUZoMkxzSSs1M0FmUG5hRDYKdjBqZUhka1BSL2JSeHlVa3VvaDZKZz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K