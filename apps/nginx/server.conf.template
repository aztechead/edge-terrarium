# =============================================================================
# AUTO-GENERATED FILE - DO NOT EDIT MANUALLY
# =============================================================================
# This file is automatically generated by the Terrarium CLI from templates.
# Any manual changes will be overwritten on the next deployment.
# 
# To modify the configuration, edit the app-config.yml files in the apps/ directory
# or update the templates in terrarium_cli/templates/
# =============================================================================

# NGINX Server Configuration Template
# This file will be dynamically generated based on app configurations

# Upstream definitions for each service
{% for app in apps %}
upstream {{ app.name }} {
    server {{ app.name }}:{{ app.runtime.port }};
}
{% endfor %}

# Main server block
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name edge-terrarium.local;
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/tls.crt;
    ssl_certificate_key /etc/nginx/ssl/tls.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # CORS headers
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Auth-Token, Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'X-Auth-Token' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Route configurations - generated from app route configurations
    {% if apps %}
    {% for app in apps %}
    {% for route in app.routes %}
    {% if route.path != '/' and not route.host %}
    location {{ '/api' + route.path.replace('*', '') }} {
        {% if route.strip_prefix %}
        # Strip prefix: /api{{ route.path }} -> {{ route.target }}
        rewrite ^/api{{ route.path | replace('*', '(.*)') }}$ {{ route.target }}$1 break;
        {% endif %}
        {% if route.strip_prefix %}
        proxy_pass http://{{ app.name }}{{ route.target }};
        {% else %}
        proxy_pass http://{{ app.name }};
        {% endif %}
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    {% endif %}
    {% endfor %}
    {% endfor %}
    {% endif %}

    # Catch-all for unmatched /api/* requests
    location /api/ {
        proxy_pass http://service-sink/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }

    # Root route (catch-all) - use the first app that has a root route, or service-sink as default
    {% set root_app = 'service-sink' %}
    {% if apps %}
    {% for app in apps %}
    {% for route in app.routes %}
    {% if route.path == '/' %}
    {% set root_app = app.name %}
    {% endif %}
    {% endfor %}
    {% endfor %}
    {% endif %}
    location / {
        proxy_pass http://{{ root_app }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
}

# Host-based routing server blocks
{% set host_routes = [] %}
{% for app in apps %}
{% for route in app.routes %}
{% if route.host %}
{% set _ = host_routes.append({'host': route.host, 'app': app.name, 'route': route}) %}
{% endif %}
{% endfor %}
{% endfor %}

{% for host in host_routes | groupby('host') %}
# Server block for {{ host.grouper }}
server {
    listen 80;
    listen 443 ssl;
    server_name {{ host.grouper }};
    
    # SSL configuration
    ssl_certificate /etc/nginx/ssl/tls.crt;
    ssl_certificate_key /etc/nginx/ssl/tls.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # CORS headers
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Auth-Token, Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'X-Auth-Token' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
        return 204;
    }

    {% for item in host.list %}
    # Host-based route: {{ item.route.path }} -> {{ item.app }}
    location {{ item.route.path.replace('*', '') }} {
        {% if item.route.strip_prefix %}
        # Strip prefix: {{ item.route.path }} -> {{ item.route.target }}
        rewrite ^{{ item.route.path | replace('*', '(.*)') }}$ {{ item.route.target }}$1 break;
        {% endif %}
        {% if item.route.strip_prefix %}
        proxy_pass http://{{ item.app }}{{ item.route.target }};
        {% else %}
        proxy_pass http://{{ item.app }};
        {% endif %}
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    {% endfor %}
}
{% endfor %}
