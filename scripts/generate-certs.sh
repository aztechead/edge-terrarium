#!/bin/bash

# Generate TLS/SSL self-signed certificates for the terrarium project
# This script creates certificates for both local development and Kubernetes

set -e

CERT_DIR="certs"
DOMAIN="edge-terrarium.local"
ALT_DOMAINS="localhost,127.0.0.1,*.edge-terrarium.local"

echo "Generating TLS/SSL certificates for Terrarium project..."

# Create certificates directory
mkdir -p "$CERT_DIR"

# Generate private key
echo "Generating private key..."
openssl genrsa -out "$CERT_DIR/edge-terrarium.key" 2048

# Generate certificate signing request
echo "Generating certificate signing request..."
openssl req -new -key "$CERT_DIR/edge-terrarium.key" -out "$CERT_DIR/edge-terrarium.csr" -subj "/C=US/ST=CA/L=San Francisco/O=Edge-Terrarium/OU=Development/CN=$DOMAIN"

# Create certificate extensions file
cat > "$CERT_DIR/edge-terrarium.ext" << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = US
ST = CA
L = San Francisco
O = Edge-Terrarium
OU = Development
CN = $DOMAIN

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = $DOMAIN
DNS.2 = localhost
DNS.3 = *.edge-terrarium.local
IP.1 = 127.0.0.1
IP.2 = ::1
EOF

# Generate self-signed certificate
echo "Generating self-signed certificate..."
openssl x509 -req -in "$CERT_DIR/edge-terrarium.csr" -signkey "$CERT_DIR/edge-terrarium.key" -out "$CERT_DIR/edge-terrarium.crt" -days 365 -extensions v3_req -extfile "$CERT_DIR/edge-terrarium.ext"

# Generate PKCS#12 format for browsers
echo "Generating PKCS#12 certificate for browsers..."
openssl pkcs12 -export -out "$CERT_DIR/edge-terrarium.p12" -inkey "$CERT_DIR/edge-terrarium.key" -in "$CERT_DIR/edge-terrarium.crt" -passout pass:edge-terrarium

# Create Kubernetes secret YAML from template
echo "Creating Kubernetes secret YAML from template..."
if [ -f "$CERT_DIR/terrarium-tls-secret.yaml.template" ]; then
    # Replace placeholders in template with actual certificate data
    sed "s/PLACEHOLDER_CERT_DATA/$(base64 -w 0 < "$CERT_DIR/edge-terrarium.crt")/g; s/PLACEHOLDER_KEY_DATA/$(base64 -w 0 < "$CERT_DIR/edge-terrarium.key")/g" \
        "$CERT_DIR/terrarium-tls-secret.yaml.template" > "$CERT_DIR/edge-terrarium-tls-secret.yaml"
else
    echo "WARNING: Template file not found, creating secret YAML from scratch..."
    cat > "$CERT_DIR/edge-terrarium-tls-secret.yaml" << EOF
# =============================================================================
# KUBERNETES TLS SECRET
# =============================================================================
# This file contains a Kubernetes Secret that stores TLS certificates and keys.
# Secrets are used to store sensitive data like passwords, tokens, and certificates.
#
# Key Concepts:
# - Secret: Kubernetes resource for storing sensitive data
# - TLS Secret: Special type of secret for TLS certificates and keys
# - Base64 Encoding: Certificates and keys are base64 encoded in the secret
# - Data: The actual certificate and key data (base64 encoded)
#
# This secret is automatically generated by the certificate generation script
# and contains the self-signed certificates for the Terrarium project.
#
# Documentation: https://kubernetes.io/docs/concepts/configuration/secret/
# =============================================================================

apiVersion: v1                    # Core API version for Secret resources
kind: Secret                      # Resource type - creates a secret
metadata:                         # Metadata about this secret
  name: terrarium-tls             # Name of the secret
  namespace: default              # Namespace where this secret lives
type: kubernetes.io/tls           # Type of secret - TLS certificate and key

# The actual certificate and key data (base64 encoded)
# These values are populated by the certificate generation script
data:
  # Base64 encoded TLS certificate
  # This is the public certificate that clients will use to verify the server
  tls.crt: $(base64 -w 0 < "$CERT_DIR/edge-terrarium.crt")
  
  # Base64 encoded TLS private key
  # This is the private key that the server uses to decrypt traffic
  tls.key: $(base64 -w 0 < "$CERT_DIR/edge-terrarium.key")
EOF
fi

# Create ConfigMap for certificate from template
echo "Creating ConfigMap YAML from template..."
if [ -f "$CERT_DIR/terrarium-tls-configmap.yaml.template" ]; then
    # Create temporary files for certificate data with proper indentation
    CERT_PEM_TEMP=$(mktemp)
    KEY_PEM_TEMP=$(mktemp)
    sed 's/^/    /' "$CERT_DIR/edge-terrarium.crt" > "$CERT_PEM_TEMP"
    sed 's/^/    /' "$CERT_DIR/edge-terrarium.key" > "$KEY_PEM_TEMP"
    
    # Replace placeholders in template with actual certificate data
    awk '
    /PLACEHOLDER_CERT_PEM_DATA/ {
        while ((getline line < "'"$CERT_PEM_TEMP"'") > 0) {
            print line
        }
        close("'"$CERT_PEM_TEMP"'")
        next
    }
    /PLACEHOLDER_KEY_PEM_DATA/ {
        while ((getline line < "'"$KEY_PEM_TEMP"'") > 0) {
            print line
        }
        close("'"$KEY_PEM_TEMP"'")
        next
    }
    { print }
    ' "$CERT_DIR/terrarium-tls-configmap.yaml.template" > "$CERT_DIR/edge-terrarium-tls-configmap.yaml"
    
    # Clean up temporary files
    rm -f "$CERT_PEM_TEMP" "$KEY_PEM_TEMP"
else
    echo "WARNING: Template file not found, creating ConfigMap YAML from scratch..."
    cat > "$CERT_DIR/edge-terrarium-tls-configmap.yaml" << EOF
# =============================================================================
# KUBERNETES CONFIGMAP - TLS CERTIFICATES
# =============================================================================
# This file contains a Kubernetes ConfigMap that stores TLS certificates and keys
# in plain text format. ConfigMaps are used to store non-sensitive configuration data.
#
# Key Concepts:
# - ConfigMap: Kubernetes resource for storing configuration data
# - Data: Key-value pairs containing configuration data
# - TLS Certificates: Public certificates and private keys for HTTPS
# - Alternative to Secrets: ConfigMaps store data in plain text (not base64 encoded)
#
# This ConfigMap is automatically generated by the certificate generation script
# and provides an alternative way to store TLS certificates (vs. using Secrets).
#
# Documentation: https://kubernetes.io/docs/concepts/configuration/configmap/
# =============================================================================

apiVersion: v1                    # Core API version for ConfigMap resources
kind: ConfigMap                   # Resource type - creates a configmap
metadata:                         # Metadata about this configmap
  name: terrarium-tls-config      # Name of the configmap
  namespace: default              # Namespace where this resource lives

# Configuration data stored in this ConfigMap
data:
  # TLS Certificate in PEM format
  # This is the public certificate that clients will use to verify the server
  tls.crt: |
$(sed 's/^/    /' "$CERT_DIR/edge-terrarium.crt")
  
  # TLS Private Key in PEM format
  # This is the private key that the server uses to decrypt traffic
  tls.key: |
$(sed 's/^/    /' "$CERT_DIR/edge-terrarium.key")
EOF
fi

# Clean up temporary files
rm -f "$CERT_DIR/edge-terrarium.csr" "$CERT_DIR/edge-terrarium.ext"

echo "Certificate generation complete!"
echo ""
echo "Generated files:"
echo "   - $CERT_DIR/edge-terrarium.key (private key)"
echo "   - $CERT_DIR/edge-terrarium.crt (certificate)"
echo "   - $CERT_DIR/edge-terrarium.p12 (PKCS#12 for browsers)"
echo "   - $CERT_DIR/edge-terrarium-tls-secret.yaml (Kubernetes secret with actual cert data)"
echo "   - $CERT_DIR/edge-terrarium-tls-configmap.yaml (Kubernetes configmap with actual cert data)"
echo ""
echo "Template files (committed to repo):"
echo "   - $CERT_DIR/terrarium-tls-secret.yaml.template (template for secret)"
echo "   - $CERT_DIR/terrarium-tls-configmap.yaml.template (template for configmap)"
echo ""
echo "To use with browsers:"
echo "   1. Import $CERT_DIR/edge-terrarium.p12 into your browser"
echo "   2. Password: edge-terrarium"
echo "   3. Add $DOMAIN to your /etc/hosts file: 127.0.0.1 $DOMAIN"
echo ""
echo "To use with Kubernetes:"
echo "   kubectl apply -f $CERT_DIR/edge-terrarium-tls-secret.yaml"
echo ""
echo "Security Notes:"
echo "   - These are self-signed certificates for development only!"
echo "   - The generated YAML files contain actual certificate data and should NOT be committed to git"
echo "   - Only the .template files should be committed to the repository"
echo "   - Run this script on each environment to generate fresh certificates"
